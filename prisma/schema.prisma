generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String         @unique
  password              String
  userType              UserType       @default(STUDENT)
  religion              Religion?
  gender                Gender?
  // Relations
  properties            Property[]     @relation("OwnerProperties")
  occupancies           Occupant[]     @relation("UserOccupancies")
  sentMessages          Message[]      @relation("SentMessages")
  studentConversations  Conversation[] @relation("StudentConversations")
  landlordConversations Conversation[] @relation("LandlordConversations")
  // Timestamps
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@map("users")
}

model Notification {
  id          String    @id @default(cuid())
  type        String    // e.g. TENANT_LEFT, PAYMENT_RECEIVED, etc.
  title       String
  message     String    @db.Text
  read        Boolean   @default(false)
  metadata    String?   @db.Text  // JSON string with additional data (propertyId, studentName, etc.)
  recipientId String?   // Optional direct recipient (usually landlord ID)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@index([recipientId])
  @@index([read])
  @@map("notifications")
}

model Property {
  id                String         @id @default(cuid())
  price             Float
  deposit           Float         @default(0)
  location          String
  bedrooms          Int
  bathrooms         Int
  description       String         @db.Text
  amenities         String         @db.Text
  status            PropertyStatus @default(AVAILABLE)
  // Room sharing preferences
  roomSharing       Boolean        @default(false)
  tenantsPerRoom    Int           @default(1)
  gender            Gender         @default(ANY)
  religion          Religion       @default(ANY)
  currentOccupants  Int           @default(0)
  // Relations
  owner             User           @relation("OwnerProperties", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String
  images            Image[]        @relation("PropertyImages")
  occupants         Occupant[]     @relation("PropertyOccupants")
  conversations     Conversation[] @relation("PropertyConversations")
  // Timestamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@map("properties")
  @@index([ownerId])
  @@index([status, roomSharing, gender, religion])
}

model Occupant {
  id            String         @id @default(cuid())
  // Relations
  user          User           @relation("UserOccupancies", fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  property      Property       @relation("PropertyOccupants", fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String
  // Occupancy details
  startDate     DateTime       @default(now())
  endDate       DateTime?
  status        OccupantStatus @default(ACTIVE)
  // Room allocation
  roomNumber    Int // Changed from numberOfRooms
  totalPrice    Float
  // Deposit tracking
  depositPaid   Float          @default(0)
  depositStatus DepositStatus  @default(PENDING)
  depositPaidAt DateTime?
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([userId, propertyId, status])
  @@index([userId])
  @@index([propertyId])
  @@index([roomNumber])
  @@map("occupants")
}

model Image {
  id         String   @id @default(cuid())
  url        String
  property   Property @relation("PropertyImages", fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())

  @@index([propertyId])
  @@map("images")
}

model Conversation {
  id         String    @id @default(cuid())
  student    User      @relation("StudentConversations", fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String
  landlord   User      @relation("LandlordConversations", fields: [landlordId], references: [id], onDelete: Cascade)
  landlordId String
  property   Property  @relation("PropertyConversations", fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  messages   Message[] @relation("ConversationMessages")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([studentId, landlordId, propertyId])
  @@index([studentId])
  @@index([landlordId])
  @@index([propertyId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())

  @@index([senderId])
  @@index([conversationId])
  @@map("messages")
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  UNDER_MAINTENANCE
}

enum OccupantStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum DepositStatus {
  PENDING
  PAID
  REFUNDED
}

enum UserType {
  STUDENT
  LANDLORD
}

enum Gender {
  MALE
  FEMALE
  ANY
}

enum Religion {
  CHRISTIAN
  MUSLIM
  HINDU
  BUDDHIST
  JEWISH
  ANY
  OTHER
}
